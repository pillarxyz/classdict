#!/bin/bash

# classdict - Tool to extract entries from Latin (Lewis & Short) and Greek (LSJ) dictionaries using SQLite
# Usage: classdict [options] WORD

# Copyright (c) 2025, Ayman Lafaz
# All rights reserved.
# Licensed under the BSD 3-Clause License
# See LICENSE file for details

# Configuration - default dictionary database paths
# These will be updated during installation
LANG_MODE="auto"  # auto, latin, or greek

# Latin dictionary database
LAT_DICT_DB="data/latin/lewis-short.db"

# Greek dictionary database
GRK_DICT_DB="data/greek/lsj.db"

# Active dictionary (will be set based on options)
DICTIONARY_DB=""

# Version information
VERSION="2.0.0"
SCRIPT_NAME=$(basename "$0")

# Function to find dictionary database files
find_dictionary_files() {
    # Look in standard locations for Latin dictionary database
    latin_std_locations=(
        "$LAT_DICT_DB"
        "$(dirname "$0")/../share/classdict/latin/lewis-short.db"
        "/usr/local/share/classdict/latin/lewis-short.db"
        "/usr/share/classdict/latin/lewis-short.db"
        "$HOME/.local/share/classdict/latin/lewis-short.db"
        "$HOME/.config/classdict/latin/lewis-short.db"
        "./data/latin/lewis-short.db"
        "./lewis-short.db"
    )

    # Look in standard locations for Greek dictionary database
    greek_std_locations=(
        "$GRK_DICT_DB"
        "$(dirname "$0")/../share/classdict/greek/lsj.db"
        "/usr/local/share/classdict/greek/lsj.db"
        "/usr/share/classdict/greek/lsj.db"
        "$HOME/.local/share/classdict/greek/lsj.db"
        "$HOME/.config/classdict/greek/lsj.db"
        "./data/greek/lsj.db"
        "./lsj.db"
    )

    # Find Latin dictionary database files
    for location in "${latin_std_locations[@]}"; do
        if [ -f "$location" ]; then
            LAT_DICT_DB="$location"
            break
        fi
    done

    # Find Greek dictionary database files
    for location in "${greek_std_locations[@]}"; do
        if [ -f "$location" ]; then
            GRK_DICT_DB="$location"
            break
        fi
    done
}

# Auto-detect if a word is Greek or Latin
detect_language() {
    local word="$1"

    # Check if word contains Greek characters
    if echo "$word" | grep -q '[αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ]'; then
        echo "greek"
    else
        # Default to Latin if no Greek characters
        echo "latin"
    fi
}

# Function to display usage information
show_usage() {
    echo "Usage: $SCRIPT_NAME [options] WORD"
    echo "Extract entries from Latin (Lewis & Short) and Greek (LSJ) dictionaries using SQLite"
    echo ""
    echo "  -h, --help             Show this help message"
    echo "  -f, --file FILE        Specify a different dictionary database path"
    echo "  -e, --exact            Require exact match (without normalization)"
    echo "  -S, --suggest          Show suggestions for similar words when no match is found"
    echo "  -L, --lemmatize        Replaces the word with its lemma and then searches for it"
    echo "  -d, --direct           Print directly to terminal (no external viewer)"
    echo "  -v, --version          Display version information"
    echo "  -l, --latin            Force Latin dictionary mode"
    echo "  -g, --greek            Force Greek dictionary mode"
    echo "  -m, --multiple [N]     Allow multiple matches and let user select (default: 5 matches)"
    echo ""
    echo "Examples:"
    echo "  $SCRIPT_NAME amor                # Latin word lookup"
    echo "  $SCRIPT_NAME λόγος              # Greek word lookup"
    echo "  $SCRIPT_NAME --latin virtus     # Force Latin dictionary"
    echo "  $SCRIPT_NAME --greek ἀρετή      # Force Greek dictionary"
    echo "  $SCRIPT_NAME -e amo             # Exact match"
    echo "  $SCRIPT_NAME -S amor            # Show suggestions if not found"
    echo "  $SCRIPT_NAME -L amabam          # Lemmatize word first (amabam → amo)"
    echo "  $SCRIPT_NAME -m 10 amo          # Show up to 10 matches and let user select"
}

# Show version information
show_version() {
    echo "$SCRIPT_NAME - Latin/Greek Dictionary CLI Tool (SQLite Version)"
    echo "Version $VERSION"
    echo "Copyright (c) 2025, Ayman Lafaz"
    echo "Licensed under the BSD 3-Clause License"
}

# Check if sqlite3 is available
check_sqlite3() {
    if ! command -v sqlite3 &> /dev/null; then
        echo "Error: sqlite3 command not found. Please install SQLite."
        exit 1
    fi
}


convert_greek_to_beta() {
  python3 -c "import sys; from beta_code import greek_to_beta_code; print(greek_to_beta_code(sys.argv[1]))" "$1"
}
convert_beta_to_greek() {
  python3 -c "import sys; from beta_code import beta_code_to_greek; print(beta_code_to_greek(sys.argv[1]))" "$1"
}



# Parse command-line arguments
EXACT_MATCH=false
SUGGEST=false
DIRECT_OUTPUT=false
LEMMATIZE=false
MULTIPLE_MATCHES=false
MAX_MATCHES=5

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -f|--file)
            CUSTOM_DICT_DB="$2"
            shift 2
            ;;
        -e|--exact)
            EXACT_MATCH=true
            shift
            ;;
        -S|--suggest)
            SUGGEST=true
            shift
            ;;
        -L|--lemmatize)
            LEMMATIZE=true
            shift
            ;;
        -d|--direct)
            DIRECT_OUTPUT=true
            shift
            ;;
        -l|--latin)
            LANG_MODE="latin"
            shift
            ;;
        -g|--greek)
            LANG_MODE="greek"
            shift
            ;;
        -m|--multiple)
            MULTIPLE_MATCHES=true
            # Check if next argument is a number
            if [[ $2 =~ ^[0-9]+$ ]]; then
                MAX_MATCHES="$2"
                shift 2
            else
                shift
            fi
            ;;
        -*)
            echo "Error: Unknown option: $1"
            show_usage
            exit 1
            ;;
        *)
            SEARCH_WORD="$1"
            shift
            ;;
    esac
done

# Validate input
if [ -z "$SEARCH_WORD" ]; then
    echo "Error: No word specified!"
    show_usage
    exit 1
fi

# Check for sqlite3
check_sqlite3

# Locate dictionary files
find_dictionary_files

# Detect language if in auto mode
if [ "$LANG_MODE" = "auto" ]; then
    LANG_MODE=$(detect_language "$SEARCH_WORD")
fi

# Set language flag for morpheus
if [ "$LANG_MODE" = "latin" ]; then
    lang_flag="-L"
elif [ "$LANG_MODE" = "greek" ]; then
    lang_flag=""
else
    lang_flag="-L" # Default to Latin
fi

# Set appropriate dictionary file based on language
if [ "$LANG_MODE" = "latin" ]; then
    DICTIONARY_DB="$LAT_DICT_DB"
    DICT_NAME="Lewis & Short Latin Dictionary"
elif [ "$LANG_MODE" = "greek" ]; then
    DICTIONARY_DB="$GRK_DICT_DB"
    DICT_NAME="Liddell-Scott-Jones Greek Dictionary"
else
    echo "Error: Unknown language mode: $LANG_MODE"
    exit 1
fi

# Use custom dictionary file if specified
if [ -n "$CUSTOM_DICT_DB" ]; then
    DICTIONARY_DB="$CUSTOM_DICT_DB"
fi

if [ ! -f "$DICTIONARY_DB" ]; then
    echo "Error: Dictionary database '$DICTIONARY_DB' not found!"
    echo "Make sure you're running this script from the correct directory,"
    echo "or specify the correct path with the -f option."
    echo ""
    echo "For $LANG_MODE dictionary, the script looked in these locations:"
    if [ "$LANG_MODE" = "latin" ]; then
        for location in "${latin_std_locations[@]}"; do
            echo "- $location"
        done
    else
        for location in "${greek_std_locations[@]}"; do
            echo "- $location"
        done
    fi
    exit 1
fi

# Check if less exists
check_viewer() {
    if ! command -v "less" &> /dev/null; then
        echo "Warning: less not found. Falling back to direct output."
        DIRECT_OUTPUT=true
    fi
}

# Create a function to handle output to either temp file or terminal
output_result() {
    if [ "$DIRECT_OUTPUT" = true ]; then
        cat -
    else
        cat - >> "$TEMP_FILE"
    fi
}

# Function to display output in less
display_output() {
    if [ "$DIRECT_OUTPUT" = false ] && [ -s "$TEMP_FILE" ]; then
        # Display the content using less
        less -R "$TEMP_FILE"
    fi
}

strip_homonym_suffix() {
    echo "$1" | sed 's/[0-9]\+$//'
}


# Set up output method
if [ "$DIRECT_OUTPUT" = false ]; then
    # Create a temporary file that will persist until script ends
    TEMP_FILE=$(mktemp /tmp/classdict.XXXXXX)

    # Set up trap to clean up on exit
    trap 'rm -f "$TEMP_FILE"' EXIT

    check_viewer

    # Print to terminal that we're searching
    echo "Searching for '$SEARCH_WORD' in $DICT_NAME..."
fi

# Start building output
{
    echo "Searching for '$SEARCH_WORD' in $DICT_NAME..."
    echo "-------------------------------------------------------------"
} | output_result

run_morpheus() {
    local word="$1"

    if [ "$LANG_MODE" = "greek" ]; then
        local beta_word
        beta_word=$(convert_greek_to_beta "$word")

        local result
        result=$(morpheus $lang_flag -S -n <<< "$beta_word" | sed 's/<NL>/\n/g' | sed 's/<\/NL>//g')

        # Extract lemma from second field of first valid line
        local lemma
        lemma=$(echo "$result" | awk 'NF >= 2 { print $2; exit }')

        # Strip homonym suffix (like λέγω3 → λέγω)
        lemma=$(strip_homonym_suffix "$lemma")

        if [ -n "$lemma" ]; then
            # Convert back to Greek for final use
            lemma=$(convert_beta_to_greek "$lemma")
            echo "$lemma"
        else
            echo ""
        fi

    else
        # LATIN logic: use existing method
        morpheus $lang_flag -S -n <<< "$word" \
            | sed 's/<NL>/\n/g' | sed 's/<\/NL>//g' | column -t \
            | awk '{
                  line = $0;
                  second_field = $2;
              }
              END {
                  split(second_field, parts, ",");
                  last_non_empty = "";
                  for (i = 1; i <= length(parts); i++) {
                    if (parts[i] != "")
                      last_non_empty = parts[i];
                  }
                  print last_non_empty;
              }' | sed 's/#.*//'
    fi
}

# Store original search word and lemmatize if requested
SEARCH_WORD_UNLEMMATIZED=$SEARCH_WORD
if [ "$LEMMATIZE" = "true" ]; then
    LEMMA=$(run_morpheus "$SEARCH_WORD")
    if [ -n "$LEMMA" ]; then
        echo "Search term '$SEARCH_WORD' replaced with lemma '$LEMMA'." | output_result
        SEARCH_WORD=$LEMMA
    else
        echo "Could not lemmatize '$SEARCH_WORD'. Using as-is." | output_result
    fi
fi

# Function to normalize Latin words for better matching
normalize_latin() {
    local input="$1"
    # Convert to lowercase
    input=$(echo "$input" | tr '[:upper:]' '[:lower:]')

    # Replace individual diacritics with their base letter one by one
    input=$(echo "$input" | sed 's/ā/a/g; s/ă/a/g; s/ä/a/g;
                                s/ē/e/g; s/ĕ/e/g; s/ë/e/g;
                                s/ī/i/g; s/ĭ/i/g; s/ï/i/g;
                                s/ō/o/g; s/ŏ/o/g; s/ö/o/g;
                                s/ū/u/g; s/ŭ/u/g; s/ü/u/g;
                                s/ȳ/y/g; s/ÿ/y/g;')
    echo "$input"
}

# Function to normalize Greek words for better matching
normalize_greek() {
    local input="$1"
    # Convert to lowercase
    input=$(echo "$input" | tr '[:upper:]' '[:lower:]')

    # Replace breathings, accents, and other diacritics
    input=$(echo "$input" | sed '
        s/[ἀἁἂἃἄἅἆἇᾀᾁᾂᾃᾄᾅᾆᾇὰάᾰᾱᾲᾳᾴᾶᾷ]/α/g;
        s/[ἐἑἒἓἔἕὲέ]/ε/g;
        s/[ἠἡἢἣἤἥἦἧᾐᾑᾒᾓᾔᾕᾖᾗὴήῂῃῄῆῇ]/η/g;
        s/[ἰἱἲἳἴἵἶἷὶίῐῑῒΐῖῗ]/ι/g;
        s/[ὀὁὂὃὄὅὸό]/ο/g;
        s/[ὐὑὒὓὔὕὖὗὺύῠῡῢΰῦῧ]/υ/g;
        s/[ὠὡὢὣὤὥὦὧᾠᾡᾢᾣᾤᾥᾦᾧὼώῲῳῴῶῷ]/ω/g;
        s/[ῤῥ]/ρ/g;')
    echo "$input"
}

# Choose the appropriate normalization function based on language
normalize_word() {
    local word="$1"

    if [ "$LANG_MODE" = "latin" ]; then
        normalize_latin "$word"
    else
        normalize_greek "$word"
    fi
}

{
  echo "Morphological analysis for '$SEARCH_WORD_UNLEMMATIZED':"
  echo "------------------------------------------"

  if [ "$LANG_MODE" = "greek" ]; then
    # Convert Greek script to Beta Code
    beta_word=$(convert_greek_to_beta "$SEARCH_WORD_UNLEMMATIZED")

    # Perform morphological analysis and clean formatting
    echo "$beta_word" | morpheus $lang_flag -S -n |
      sed 's/<NL>/\n/g' | sed 's/<\/NL>//g' |
      while IFS= read -r line; do
        word=$(echo "$line" | awk '{print $1}')
        rest=$(echo "$line" | cut -d' ' -f2-)
        greek_word=$(convert_beta_to_greek "$word")
        printf "%-20s %s\n" "$greek_word" "$rest"
      done | column -t

  else
    # For Latin or other languages
    echo "$SEARCH_WORD_UNLEMMATIZED" | morpheus $lang_flag -S -n |
      sed 's/<NL>/\n/g' | sed 's/<\/NL>//g' | column -t
  fi

  echo ""
} | output_result

# Function to select entry from multiple matches

select_from_matches() {
    local matches=("$@")
    local num_matches=${#matches[@]}

    # Display the matches with numbers
    echo "Multiple matches found. Please select one:" >&2
    for i in $(seq 0 $((num_matches - 1))); do
        # Extract just the headword from the line (before the pipe)
        local headword=$(echo "${matches[$i]}" | cut -d'|' -f1)
        echo "  $((i + 1)). $headword" >&2
    done

    # Prompt for selection
    echo "Enter number (1-$num_matches) or 'q' to quit: " >&2
    read -r selection

    # Validate selection
    if [[ "$selection" == "q" ]]; then
        echo "Search canceled." >&2
        return 1
    elif [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le "$num_matches" ]; then
        echo "${matches[$((selection - 1))]}"
        return 0
    else
        echo "Invalid selection. Displaying first match." >&2
        echo "${matches[0]}"
        return 0
    fi
}


# Prepare search query based on options
NORMALIZED_WORD=$(normalize_word "$SEARCH_WORD")

if [ "$MULTIPLE_MATCHES" = true ]; then
    # Search for multiple matches
    if [ "$EXACT_MATCH" = true ]; then
        # For exact match with multiple matches option
        QUERY="SELECT headword, definition FROM dictionary WHERE headword = '$SEARCH_WORD' COLLATE NOCASE LIMIT $MAX_MATCHES;"
    else
        # For non-exact match with multiple matches option
        QUERY="SELECT headword, definition FROM dictionary WHERE normalized_headword = '$NORMALIZED_WORD'"

        # If we used lemmatization, add condition for original word
        if [ "$LEMMATIZE" = true ]; then
            NORMALIZED_UNLEMMATIZED=$(normalize_word "$SEARCH_WORD_UNLEMMATIZED")
            QUERY="$QUERY UNION ALL SELECT headword, definition FROM dictionary WHERE normalized_headword = '$NORMALIZED_UNLEMMATIZED'"
        fi

        # Add partial matches as another condition
        QUERY="$QUERY UNION ALL SELECT headword, definition FROM dictionary WHERE normalized_headword LIKE '$NORMALIZED_WORD%'"

        # Add matches within words as another condition
        QUERY="$QUERY UNION ALL SELECT headword, definition FROM dictionary WHERE normalized_headword LIKE '%$NORMALIZED_WORD%'"

        # Add limit at the end of the combined query
        QUERY="$QUERY LIMIT $MAX_MATCHES;"
    fi

    # Execute the query and store results in an array
    mapfile -t RESULTS < <(sqlite3 "$DICTIONARY_DB" "$QUERY")

    # Count the number of results
    NUM_RESULTS=${#RESULTS[@]}

    if [ "$NUM_RESULTS" -gt 1 ]; then
        # We have multiple matches, let the user select one
        SELECTED_RESULT=$(select_from_matches "${RESULTS[@]}")
        SELECTION_STATUS=$?

        if [ "$SELECTION_STATUS" -eq 0 ] && [ -n "$SELECTED_RESULT" ]; then
            # User made a valid selection
            RESULT="$SELECTED_RESULT"
        else
            # User canceled or error occurred
            exit 0
        fi
    elif [ "$NUM_RESULTS" -eq 1 ]; then
        # Only one result found
        RESULT="${RESULTS[0]}"
    else
        # No results found
        RESULT=""
    fi
else
    # Original search logic for single match
    if [ "$EXACT_MATCH" = true ]; then
        # For exact match, search directly in headword column
        QUERY="SELECT headword, definition FROM dictionary WHERE headword = '$SEARCH_WORD' COLLATE NOCASE LIMIT 1;"
        RESULT=$(sqlite3 "$DICTIONARY_DB" "$QUERY")

        # If no result, try with the original word
        if [ -z "$RESULT" ] && [ "$LEMMATIZE" = true ]; then
            QUERY="SELECT headword, definition FROM dictionary WHERE headword = '$SEARCH_WORD_UNLEMMATIZED' COLLATE NOCASE LIMIT 1;"
            RESULT=$(sqlite3 "$DICTIONARY_DB" "$QUERY")
        fi
    else
        # For non-exact match, normalize the word and search in the normalized_headword column
        QUERY="SELECT headword, definition FROM dictionary WHERE normalized_headword = '$NORMALIZED_WORD' LIMIT 1;"
        RESULT=$(sqlite3 "$DICTIONARY_DB" "$QUERY")

        # If no result and we used lemmatization, try with the original word
        if [ -z "$RESULT" ] && [ "$LEMMATIZE" = true ]; then
            NORMALIZED_UNLEMMATIZED=$(normalize_word "$SEARCH_WORD_UNLEMMATIZED")
            QUERY="SELECT headword, definition FROM dictionary WHERE normalized_headword = '$NORMALIZED_UNLEMMATIZED' LIMIT 1;"
            RESULT=$(sqlite3 "$DICTIONARY_DB" "$QUERY")
        fi

        # If still no result, try partial matches
        if [ -z "$RESULT" ]; then
            QUERY="SELECT headword, definition FROM dictionary WHERE normalized_headword LIKE '$NORMALIZED_WORD%' LIMIT 1;"
            RESULT=$(sqlite3 "$DICTIONARY_DB" "$QUERY")
        fi

        # If still no result, try searching within words
        if [ -z "$RESULT" ]; then
            QUERY="SELECT headword, definition FROM dictionary WHERE normalized_headword LIKE '%$NORMALIZED_WORD%' LIMIT 1;"
            RESULT=$(sqlite3 "$DICTIONARY_DB" "$QUERY")
        fi
    fi
fi

# If we found a result, display it
if [ -n "$RESULT" ]; then
    # Split result into headword and definition
    HEADWORD=$(echo "$RESULT" | cut -d '|' -f 1)
    DEFINITION=$(echo "$RESULT" | cut -d '|' -f 2-)

    {
        echo "Found entry: $HEADWORD"
        echo "-------------------------------------------------------------"
        echo "$DEFINITION"
    } | output_result

# If no result was found, try to provide suggestions if enabled
else
    {
        echo "No entry found for '$SEARCH_WORD'."
        echo "Try checking the spelling or searching for a different form of the word."

        if [ "$SUGGEST" = true ]; then
            echo ""
            echo "Possible related entries:"
            NORMALIZED_WORD=$(normalize_word "$SEARCH_WORD")
            SUGGEST_QUERY="SELECT headword FROM dictionary WHERE normalized_headword LIKE '$NORMALIZED_WORD%' LIMIT 5;"
            SUGGESTIONS=$(sqlite3 "$DICTIONARY_DB" "$SUGGEST_QUERY")

            if [ -n "$SUGGESTIONS" ]; then
                echo "$SUGGESTIONS"
            else
                # Try finding words that contain the search term
                SUGGEST_QUERY="SELECT headword FROM dictionary WHERE normalized_headword LIKE '%$NORMALIZED_WORD%' LIMIT 5;"
                SUGGESTIONS=$(sqlite3 "$DICTIONARY_DB" "$SUGGEST_QUERY")

                if [ -n "$SUGGESTIONS" ]; then
                    echo "Or perhaps one of these entries contains your word:"
                    echo "$SUGGESTIONS"
                else
                    echo "No suggestions found."
                fi
            fi
        fi
    } | output_result
fi

{
    echo "-------------------------------------------------------------"
    echo "Database: $DICTIONARY_DB"
} | output_result

# Display the results if using a viewer
display_output
